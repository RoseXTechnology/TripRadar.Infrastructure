# PowerShell script to set up Terraform backend storage
param(
    [string]$Environment = "dev"
)

# Configuration
$PROJECT = "tripradar"
$LOCATION = "northeurope"
$TIMESTAMP = (Get-Date).ToString("yyMMdd")

# Generate names
$RG_NAME = "${PROJECT}-tfstate-rg"
$SA_NAME = "${PROJECT}tfstate${TIMESTAMP}"
$CONTAINER_NAME = "tfstate"

Write-Host "üöÄ Setting up Terraform backend for ${PROJECT}-${Environment}" -ForegroundColor Green
Write-Host "Resource Group: ${RG_NAME}" -ForegroundColor Cyan
Write-Host "Storage Account: ${SA_NAME}" -ForegroundColor Cyan
Write-Host "Container: ${CONTAINER_NAME}" -ForegroundColor Cyan

# Check if logged into Azure
try {
    $null = az account show --output none
    if ($LASTEXITCODE -ne 0) { throw }
} catch {
    Write-Host "‚ùå Not logged into Azure. Please run 'az login' first." -ForegroundColor Red
    exit 1
}

# Create Resource Group
Write-Host "üì¶ Creating resource group..." -ForegroundColor Yellow
az group create `
    --name $RG_NAME `
    --location $LOCATION `
    --tags "Project=$PROJECT" "Purpose=TerraformState" | Out-Null

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Failed to create resource group" -ForegroundColor Red
    exit 1
}

# Create Storage Account
Write-Host "üíæ Creating storage account..." -ForegroundColor Yellow
az storage account create `
    --resource-group $RG_NAME `
    --name $SA_NAME `
    --location $LOCATION `
    --sku "Standard_LRS" `
    --kind "StorageV2" `
    --allow-blob-public-access false `
    --https-only true `
    --tags "Project=$PROJECT" "Purpose=TerraformState" | Out-Null

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Failed to create storage account" -ForegroundColor Red
    exit 1
}

# Create Container
Write-Host "üìÇ Creating blob container..." -ForegroundColor Yellow
az storage container create `
    --account-name $SA_NAME `
    --name $CONTAINER_NAME `
    --auth-mode login | Out-Null

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Failed to create container" -ForegroundColor Red
    exit 1
}

# Update backend.hcl
$BACKEND_FILE = "infra/terraform/environments/$Environment/app/backend.hcl"
Write-Host "‚úèÔ∏è  Updating $BACKEND_FILE..." -ForegroundColor Yellow

$backendContent = @"
# Remote state backend configuration for $Environment environment
# Auto-generated by setup-terraform-backend.ps1 on $(Get-Date)
resource_group_name  = "$RG_NAME"
storage_account_name = "$SA_NAME"
container_name       = "$CONTAINER_NAME"
key                  = "tripradar-$Environment.tfstate"
"@

Set-Content -Path $BACKEND_FILE -Value $backendContent -Encoding UTF8

Write-Host "‚úÖ Terraform backend setup complete!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Configuration created:" -ForegroundColor Cyan
Write-Host "  Resource Group: $RG_NAME"
Write-Host "  Storage Account: $SA_NAME"
Write-Host "  Container: $CONTAINER_NAME"
Write-Host "  Backend file: $BACKEND_FILE"
Write-Host ""
Write-Host "üîß Next steps:" -ForegroundColor Yellow
Write-Host "1. Commit the updated backend.hcl file"
Write-Host "2. Grant OIDC identity access to storage account"
Write-Host "3. Re-run your GitHub Actions workflow"

# Output commands for granting access
Write-Host ""
Write-Host "üîê Run this command to grant OIDC access:" -ForegroundColor Magenta
Write-Host "az role assignment create --assignee `$AZURE_CLIENT_ID --role `"Storage Blob Data Contributor`" --scope `"/subscriptions/`$AZURE_SUBSCRIPTION_ID/resourceGroups/$RG_NAME/providers/Microsoft.Storage/storageAccounts/$SA_NAME`""
