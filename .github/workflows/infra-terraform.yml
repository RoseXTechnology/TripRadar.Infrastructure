name: Infrastructure - Terraform

on:
  pull_request:
    paths:
      - 'infra/terraform/**'
  push:
    branches:
      - development
      - main
    paths:
      - 'infra/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to target (dev or prod)'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]
      ref:
        description: 'Git ref (branch or tag) to checkout (e.g., development)'
        required: false
        default: 'development'
        type: string
      api_image:
        description: 'Optional: Full image ref for API (e.g., myacr.azurecr.io/tripradar/api:sha)'
        required: false
        type: string
      jobs_image:
        description: 'Optional: Full image ref for Jobs (e.g., myacr.azurecr.io/tripradar/jobs:sha)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

# Using job-level concurrency groups per environment (dev/prod) to avoid
# overlapping runs on the same remote state key.
# concurrency:
#   group: terraform-${{ github.ref }}
#   cancel-in-progress: false

env:
  TF_WORKING_DIR: infra/terraform/stacks/app

jobs:
  fmt-validate-plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: dev
    concurrency:
      group: terraform-dev
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env for Terraform (OIDC)
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Fmt
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Init (dev backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_SA }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=tripradar-dev.tfstate"

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan (dev) with auto-unlock
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          set +e
          terraform plan -lock-timeout=5m -var-file=../../environments/dev/terraform.tfvars |& tee plan.out
          status=${PIPESTATUS[0]}
          set -e
          if [ "$status" -ne 0 ]; then
            if grep -q "Error acquiring the state lock" plan.out; then
              LOCK_ID=$(awk '/Lock Info:/ {found=1} found && /ID:/ {print $2; exit}' plan.out)
              if [ -n "$LOCK_ID" ]; then
                echo "Stale lock detected. Force-unlocking $LOCK_ID ..."
                terraform force-unlock -force "$LOCK_ID" || true
                terraform plan -lock-timeout=5m -var-file=../../environments/dev/terraform.tfvars
              else
                echo "Could not extract lock ID from Terraform output."; exit 1
              fi
            else
              exit "$status"
            fi
          fi

  apply-dev:
    if: github.event_name == 'push' && github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    environment: dev
    concurrency:
      group: terraform-dev
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env for Terraform (OIDC)
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init (dev backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_SA }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=tripradar-dev.tfstate"

      - name: Idempotent import of existing Resource Group (dev)
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          ADDR="azurerm_resource_group.rg"
          RG_NAME="tripradar-dev-rg"
          if terraform state list | grep -q "^$ADDR$"; then
            echo "RG already in state — skipping import"
            exit 0
          fi
          if az group show -n "$RG_NAME" >/dev/null 2>&1; then
            echo "Importing existing RG into state..."
            terraform import "$ADDR" "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RG_NAME}" || true
          else
            echo "RG not found in Azure — skipping import"
          fi

      - name: Terraform Apply (dev) with auto-unlock
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          set +e
          terraform apply -auto-approve -lock-timeout=5m -var-file=../../environments/dev/terraform.tfvars |& tee apply.out
          status=${PIPESTATUS[0]}
          set -e
          if [ "$status" -ne 0 ]; then
            if grep -q "Error acquiring the state lock" apply.out; then
              LOCK_ID=$(awk '/Lock Info:/ {found=1} found && /ID:/ {print $2; exit}' apply.out)
              if [ -n "$LOCK_ID" ]; then
                echo "Stale lock detected. Force-unlocking $LOCK_ID ..."
                terraform force-unlock -force "$LOCK_ID" || true
                terraform apply -auto-approve -lock-timeout=5m -var-file=../../environments/dev/terraform.tfvars
              else
                echo "Could not extract lock ID from Terraform output."; exit 1
              fi
            else
              exit "$status"
            fi
          fi

      - name: Show Terraform outputs (dev)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Terraform Outputs:" >> $GITHUB_STEP_SUMMARY
          terraform output | tee -a $GITHUB_STEP_SUMMARY
          API_URL=$(terraform output -raw api_url 2>/dev/null || true)
          if [ -n "$API_URL" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "API URL: $API_URL" >> $GITHUB_STEP_SUMMARY
            echo "Open: $API_URL"
          fi

  apply-prod:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    concurrency:
      group: terraform-prod
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env for Terraform (OIDC)
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init (prod backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_SA }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=tripradar-prod.tfstate"

      - name: Terraform Apply (prod) with auto-unlock
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          set +e
          terraform apply -auto-approve -lock-timeout=5m -var-file=../../environments/prod/terraform.tfvars |& tee apply.out
          status=${PIPESTATUS[0]}
          set -e
          if [ "$status" -ne 0 ]; then
            if grep -q "Error acquiring the state lock" apply.out; then
              LOCK_ID=$(awk '/Lock Info:/ {found=1} found && /ID:/ {print $2; exit}' apply.out)
              if [ -n "$LOCK_ID" ]; then
                echo "Stale lock detected. Force-unlocking $LOCK_ID ..."
                terraform force-unlock -force "$LOCK_ID" || true
                terraform apply -auto-approve -lock-timeout=5m -var-file=../../environments/prod/terraform.tfvars
              else
                echo "Could not extract lock ID from Terraform output."; exit 1
              fi
            else
              exit "$status"
            fi
          fi

      - name: Show Terraform outputs (prod)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Terraform Outputs:" >> $GITHUB_STEP_SUMMARY
          terraform output | tee -a $GITHUB_STEP_SUMMARY
          API_URL=$(terraform output -raw api_url 2>/dev/null || true)
          if [ -n "$API_URL" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "API URL: $API_URL" >> $GITHUB_STEP_SUMMARY
            echo "Open: $API_URL"
          fi

  apply-manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency:
      group: terraform-${{ inputs.environment }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Debug - List directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository structure:"
          find . -type d -name "modules" -o -name "terraform" | head -20
          echo "Terraform modules directory:"
          ls -la infra/terraform/ || echo "infra/terraform not found"
          ls -la infra/terraform/modules/ || echo "modules directory not found"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env for Terraform (OIDC)
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Validate backend secrets
        run: |
          set -euo pipefail
          RG="${{ secrets.TFSTATE_RG }}"
          SA="${{ secrets.TFSTATE_SA }}"
          CT="${{ secrets.TFSTATE_CONTAINER }}"
          missing=0
          if [ -z "$RG" ]; then echo "Missing secret: TFSTATE_RG"; missing=1; fi
          if [ -z "$SA" ]; then echo "Missing secret: TFSTATE_SA"; missing=1; fi
          if [ -z "$CT" ]; then echo "Missing secret: TFSTATE_CONTAINER"; missing=1; fi
          if [ "$missing" -ne 0 ]; then echo "One or more backend secrets are missing. Set them at repository or environment (dev/prod) level."; exit 1; fi
          echo "Backend secrets present."

      - name: Terraform Init (backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          KEY="tripradar-${{ inputs.environment }}.tfstate"
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_SA }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=$KEY"

      - name: Idempotent import of existing Resource Group (manual dev)
        if: ${{ inputs.environment == 'dev' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          ADDR="azurerm_resource_group.rg"
          RG_NAME="tripradar-dev-rg"
          if terraform state list | grep -q "^$ADDR$"; then
            echo "RG already in state — skipping import"
            exit 0
          fi
          if az group show -n "$RG_NAME" >/dev/null 2>&1; then
            echo "Importing existing RG into state..."
            terraform import "$ADDR" "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RG_NAME}" || true
          else
            echo "RG not found in Azure — skipping import"
          fi

      - name: Prepare TF VARs (images)
        if: ${{ inputs.api_image != '' || inputs.jobs_image != '' }}
        run: |
          if [ "${{ inputs.api_image }}" != "" ]; then echo "TF_VAR_api_image=${{ inputs.api_image }}" >> $GITHUB_ENV; fi
          if [ "${{ inputs.jobs_image }}" != "" ]; then echo "TF_VAR_jobs_image=${{ inputs.jobs_image }}" >> $GITHUB_ENV; fi
        shell: bash

      - name: Terraform Apply (manual) with auto-unlock
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          TFVARS="../../environments/${{ inputs.environment }}/terraform.tfvars"
          echo "Using tfvars: $TFVARS"
          set +e
          terraform apply -auto-approve -lock-timeout=5m -var-file="$TFVARS" |& tee apply.out
          status=${PIPESTATUS[0]}
          set -e
          if [ "$status" -ne 0 ]; then
            if grep -q "Error acquiring the state lock" apply.out; then
              LOCK_ID=$(awk '/Lock Info:/ {found=1} found && /ID:/ {print $2; exit}' apply.out)
              if [ -n "$LOCK_ID" ]; then
                echo "Stale lock detected. Force-unlocking $LOCK_ID ..."
                terraform force-unlock -force "$LOCK_ID" || true
                terraform apply -auto-approve -lock-timeout=5m -var-file="$TFVARS"
              else
                echo "Could not extract lock ID from Terraform output."; exit 1
              fi
            else
              exit "$status"
            fi
          fi

      - name: Show Terraform outputs (manual)
        if: ${{ success() }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Terraform Outputs:" >> $GITHUB_STEP_SUMMARY
          terraform output | tee -a $GITHUB_STEP_SUMMARY
          API_URL=$(terraform output -raw api_url 2>/dev/null || true)
          if [ -n "$API_URL" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "API URL: $API_URL" >> $GITHUB_STEP_SUMMARY
            echo "Open: $API_URL"
          fi
