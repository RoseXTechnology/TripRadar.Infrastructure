name: Infrastructure - Terraform

on:
  pull_request:
    paths:
      - 'infra/terraform/**'
  push:
    branches: 
      - development
    paths:
      - 'infra/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to target (dev or prod)'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]
      ref:
        description: 'Git ref (branch or tag) to checkout (e.g., dev, main)'
        required: false
        default: 'dev'
        type: string
      api_image:
        description: 'Optional: Full image ref for API (e.g., myacr.azurecr.io/tripradar/api:sha)'
        required: false
        type: string
      jobs_image:
        description: 'Optional: Full image ref for Jobs (e.g., myacr.azurecr.io/tripradar/jobs:sha)'
        required: false
        type: string
      libby_image:
        description: 'Optional: Full image ref for Libby (e.g., myacr.azurecr.io/tripradar/libby:sha)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_WORKING_DIR: infra/terraform/stacks/app

jobs:
  fmt-validate-plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Fmt
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Init (dev backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_SA }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=tripradar-dev.tfstate"

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan (dev)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -var-file=../../environments/dev/terraform.tfvars

  apply-dev:
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init (dev backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_SA }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=tripradar-dev.tfstate"

      - name: Terraform Apply (dev)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -var-file=../../environments/dev/terraform.tfvars

  apply-prod:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init (prod backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_SA }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=tripradar-prod.tfstate"

      - name: Terraform Apply (prod)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -var-file=../../environments/prod/terraform.tfvars

  apply-manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Debug - List directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository structure:"
          find . -type d -name "modules" -o -name "terraform" | head -20
          echo "Terraform modules directory:"
          ls -la infra/terraform/ || echo "infra/terraform not found"
          ls -la infra/terraform/modules/ || echo "modules directory not found"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Debug - Validate module path from TF working dir
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "PWD: $(pwd)"
          echo "Listing here:" && ls -la
          echo "Listing ../..:" && ls -la ../../ || true
          echo "Listing ../../modules:" && ls -la ../../modules || true
          echo "Listing ../../modules/container_app:" && ls -la ../../modules/container_app || true

      - name: Terraform Init (backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          KEY="tripradar-${{ inputs.environment }}.tfstate"
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_SA }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=$KEY"

      - name: Prepare TF VARs (images)
        if: ${{ inputs.api_image != '' || inputs.jobs_image != '' || inputs.libby_image != '' }}
        run: |
          if [ "${{ inputs.api_image }}" != "" ]; then echo "TF_VAR_api_image=${{ inputs.api_image }}" >> $GITHUB_ENV; fi
          if [ "${{ inputs.jobs_image }}" != "" ]; then echo "TF_VAR_jobs_image=${{ inputs.jobs_image }}" >> $GITHUB_ENV; fi
          if [ "${{ inputs.libby_image }}" != "" ]; then echo "TF_VAR_libby_image=${{ inputs.libby_image }}" >> $GITHUB_ENV; fi
        shell: bash

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          TFVARS="../../environments/${{ inputs.environment }}/terraform.tfvars"
          terraform apply -auto-approve -var-file=$TFVARS
