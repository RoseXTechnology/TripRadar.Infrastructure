name: Deploy TripRadar Applications

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_main_api:
        description: 'Deploy Main API'
        required: true
        default: true
        type: boolean
      deploy_jobs_api:
        description: 'Deploy Jobs API'
        required: true
        default: true
        type: boolean
      image_tag:
        description: 'Container image tag'
        required: false
        default: 'latest'
        type: string
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Dockerfile*'
      - '.github/workflows/app-deploy.yml'

env:
  AZURE_REGION: 'North Europe'
  APP_NAME: 'tripradar'

jobs:
  build:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get ACR Login Server
        id: acr
        run: |
          # Get ACR details from existing infrastructure
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          
          # Find ACR in the target environment
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          ACR_NAME=$(az acr list --query "[?contains(name, 'tripradar') && contains(name, '$ENV')].name" -o tsv | head -1)
          
          if [ -z "$ACR_NAME" ]; then
            echo "‚ùå Could not find ACR for environment: $ENV"
            exit 1
          fi
          
          ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer -o tsv)
          
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "üìç Using ACR: $ACR_LOGIN_SERVER"

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ steps.acr.outputs.acr_name }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.acr.outputs.acr_login_server }}/tripradar-main-api
            ${{ steps.acr.outputs.acr_login_server }}/tripradar-jobs-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=${{ github.event.inputs.image_tag || 'latest' }}

      - name: Build and push Main API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.mainapi
          push: true
          tags: ${{ steps.acr.outputs.acr_login_server }}/tripradar-main-api:${{ github.event.inputs.image_tag || 'latest' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Jobs API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.jobsapi
          push: true
          tags: ${{ steps.acr.outputs.acr_login_server }}/tripradar-jobs-api:${{ github.event.inputs.image_tag || 'latest' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.acr.outputs.acr_login_server }}/tripradar-main-api:${{ github.event.inputs.image_tag || 'latest' }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment:
      name: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Container App Information
        id: apps
        run: |
          ENV="dev"
          
          # Find container apps
          MAIN_API_APP=$(az containerapp list --query "[?contains(name, 'tripradar') && contains(name, '$ENV') && contains(name, 'mainapi')].name" -o tsv | head -1)
          JOBS_API_APP=$(az containerapp list --query "[?contains(name, 'tripradar') && contains(name, '$ENV') && contains(name, 'jobsapi')].name" -o tsv | head -1)
          
          # Get resource group
          RESOURCE_GROUP=$(az containerapp show --name $MAIN_API_APP --query resourceGroup -o tsv)
          
          echo "main_api_app=$MAIN_API_APP" >> $GITHUB_OUTPUT
          echo "jobs_api_app=$JOBS_API_APP" >> $GITHUB_OUTPUT
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          
          echo "üìç Main API App: $MAIN_API_APP"
          echo "üìç Jobs API App: $JOBS_API_APP"
          echo "üìç Resource Group: $RESOURCE_GROUP"

      - name: Deploy Main API
        if: github.event.inputs.deploy_main_api != 'false'
        run: |
          echo "Deploying Main API to Development..."
          
          # Get ACR login server
          ACR_LOGIN_SERVER=$(az acr list --query "[?contains(name, 'tripradar') && contains(name, 'dev')].loginServer" -o tsv | head -1)
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          
          az containerapp update \
            --name ${{ steps.apps.outputs.main_api_app }} \
            --resource-group ${{ steps.apps.outputs.resource_group }} \
            --image "$ACR_LOGIN_SERVER/tripradar-main-api:$IMAGE_TAG" \
            --revision-suffix "$(date +%Y%m%d-%H%M%S)"
          
          echo "‚úÖ Main API deployment completed"

      - name: Deploy Jobs API
        if: github.event.inputs.deploy_jobs_api != 'false'
        run: |
          echo "Deploying Jobs API to Development..."
          
          # Get ACR login server
          ACR_LOGIN_SERVER=$(az acr list --query "[?contains(name, 'tripradar') && contains(name, 'dev')].loginServer" -o tsv | head -1)
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          
          az containerapp update \
            --name ${{ steps.apps.outputs.jobs_api_app }} \
            --resource-group ${{ steps.apps.outputs.resource_group }} \
            --image "$ACR_LOGIN_SERVER/tripradar-jobs-api:$IMAGE_TAG" \
            --revision-suffix "$(date +%Y%m%d-%H%M%S)"
          
          echo "‚úÖ Jobs API deployment completed"

      - name: Wait for deployment and run tests
        run: |
          echo "Waiting for applications to be ready..."
          sleep 60
          
          # Get Main API URL
          MAIN_API_URL=$(az containerapp show --name ${{ steps.apps.outputs.main_api_app }} --resource-group ${{ steps.apps.outputs.resource_group }} --query properties.configuration.ingress.fqdn -o tsv)
          
          # Health checks
          if curl -f -s "https://$MAIN_API_URL/health" > /dev/null; then
            echo "‚úÖ Main API health check passed"
          else
            echo "‚ùå Main API health check failed"
            exit 1
          fi
          
          echo "üéâ Development deployment and tests completed successfully!"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment:
      name: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Staging
        run: |
          echo "Deploying applications to Staging..."
          
          ENV="staging"
          
          # Find container apps and resource group
          MAIN_API_APP=$(az containerapp list --query "[?contains(name, 'tripradar') && contains(name, '$ENV') && contains(name, 'mainapi')].name" -o tsv | head -1)
          JOBS_API_APP=$(az containerapp list --query "[?contains(name, 'tripradar') && contains(name, '$ENV') && contains(name, 'jobsapi')].name" -o tsv | head -1)
          RESOURCE_GROUP=$(az containerapp show --name $MAIN_API_APP --query resourceGroup -o tsv)
          ACR_LOGIN_SERVER=$(az acr list --query "[?contains(name, 'tripradar') && contains(name, '$ENV')].loginServer" -o tsv | head -1)
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          
          # Deploy applications with zero-downtime
          if [ "${{ github.event.inputs.deploy_main_api }}" != "false" ]; then
            az containerapp update \
              --name "$MAIN_API_APP" \
              --resource-group "$RESOURCE_GROUP" \
              --image "$ACR_LOGIN_SERVER/tripradar-main-api:$IMAGE_TAG" \
              --revision-suffix "$(date +%Y%m%d-%H%M%S)"
          fi
          
          if [ "${{ github.event.inputs.deploy_jobs_api }}" != "false" ]; then
            az containerapp update \
              --name "$JOBS_API_APP" \
              --resource-group "$RESOURCE_GROUP" \
              --image "$ACR_LOGIN_SERVER/tripradar-jobs-api:$IMAGE_TAG" \
              --revision-suffix "$(date +%Y%m%d-%H%M%S)"
          fi
          
          echo "‚úÖ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment:
      name: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Production Blue-Green Deployment
        run: |
          echo "Deploying applications to Production with Blue-Green strategy..."
          
          ENV="prod"
          
          # Find container apps and resource group
          MAIN_API_APP=$(az containerapp list --query "[?contains(name, 'tripradar') && contains(name, '$ENV') && contains(name, 'mainapi')].name" -o tsv | head -1)
          JOBS_API_APP=$(az containerapp list --query "[?contains(name, 'tripradar') && contains(name, '$ENV') && contains(name, 'jobsapi')].name" -o tsv | head -1)
          RESOURCE_GROUP=$(az containerapp show --name $MAIN_API_APP --query resourceGroup -o tsv)
          ACR_LOGIN_SERVER=$(az acr list --query "[?contains(name, 'tripradar') && contains(name, '$ENV')].loginServer" -o tsv | head -1)
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          
          # Deploy with traffic splitting for zero-downtime deployment
          if [ "${{ github.event.inputs.deploy_main_api }}" != "false" ]; then
            # Create new revision
            REVISION_SUFFIX="$(date +%Y%m%d-%H%M%S)"
            
            az containerapp update \
              --name "$MAIN_API_APP" \
              --resource-group "$RESOURCE_GROUP" \
              --image "$ACR_LOGIN_SERVER/tripradar-main-api:$IMAGE_TAG" \
              --revision-suffix "$REVISION_SUFFIX"
            
            # Wait for new revision to be ready
            sleep 120
            
            # Gradually shift traffic: 10% -> 50% -> 100%
            echo "Shifting 10% traffic to new revision..."
            az containerapp revision set-mode --name "$MAIN_API_APP" --resource-group "$RESOURCE_GROUP" --mode multiple
            az containerapp ingress traffic set --name "$MAIN_API_APP" --resource-group "$RESOURCE_GROUP" --revision-weight latest=10,others=90
            
            sleep 60
            
            echo "Shifting 50% traffic to new revision..."
            az containerapp ingress traffic set --name "$MAIN_API_APP" --resource-group "$RESOURCE_GROUP" --revision-weight latest=50,others=50
            
            sleep 120
            
            echo "Shifting 100% traffic to new revision..."
            az containerapp ingress traffic set --name "$MAIN_API_APP" --resource-group "$RESOURCE_GROUP" --revision-weight latest=100
          fi
          
          # Similar process for Jobs API
          if [ "${{ github.event.inputs.deploy_jobs_api }}" != "false" ]; then
            az containerapp update \
              --name "$JOBS_API_APP" \
              --resource-group "$RESOURCE_GROUP" \
              --image "$ACR_LOGIN_SERVER/tripradar-jobs-api:$IMAGE_TAG" \
              --revision-suffix "$(date +%Y%m%d-%H%M%S)"
          fi
          
          echo "‚úÖ Production deployment completed with Blue-Green strategy"

      - name: Production Health Verification
        run: |
          echo "Running comprehensive production health checks..."
          
          ENV="prod"
          MAIN_API_APP=$(az containerapp list --query "[?contains(name, 'tripradar') && contains(name, '$ENV') && contains(name, 'mainapi')].name" -o tsv | head -1)
          RESOURCE_GROUP=$(az containerapp show --name $MAIN_API_APP --query resourceGroup -o tsv)
          
          # Get Main API URL
          MAIN_API_URL=$(az containerapp show --name "$MAIN_API_APP" --resource-group "$RESOURCE_GROUP" --query properties.configuration.ingress.fqdn -o tsv)
          
          # Extended health checks with retries
          for i in {1..5}; do
            if curl -f -s "https://$MAIN_API_URL/health" > /dev/null; then
              echo "‚úÖ Production health check $i/5 passed"
              break
            else
              echo "‚è≥ Production health check $i/5 failed, retrying..."
              sleep 30
              if [ $i -eq 5 ]; then
                echo "‚ùå All production health checks failed"
                exit 1
              fi
            fi
          done
          
          echo "üéâ Production deployment verified successfully!"
