name: Validate Infrastructure

on:
  push:
    branches: [ development, main ]
    paths:
      - 'infra/**'
      - 'src/**'
      - 'templates/**'
      - 'Dockerfile*'
      - '.github/workflows/**'
  pull_request:
    branches: [ development, main ]
    paths:
      - 'infra/**'
      - 'src/**'
      - 'templates/**'
      - 'Dockerfile*'

jobs:
  # Quality & Security Gates
  quality-check:
    name: 🛡️ Quality & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
      checks: write
      statuses: write
      actions: read  # For workflow telemetry

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    # Commit message validation (only on PRs)
    - name: 🔍 Conventional Commits Check
      if: github.event_name == 'pull_request'
      run: |
        echo "🔍 Checking commit message format..."

        commits=$(git log --oneline --no-merges HEAD~${{ github.event.pull_request.commits }}..HEAD 2>/dev/null || git log --oneline --no-merges -10 2>/dev/null || echo "")

        if [ -z "$commits" ]; then
          echo "✅ No commits found to check"
          exit 0
        fi

        echo "$commits" | while read -r commit; do
          commit_msg=$(echo "$commit" | cut -d' ' -f2-)

          if echo "$commit_msg" | grep -q "dependabot\|Merge"; then
            echo "✅ $commit_msg - allowed"
            continue
          fi

          if echo "$commit_msg" | grep -qE "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test|infra|security)(\(.+\))?: "; then
            echo "✅ $commit_msg - valid format"
          else
            echo "❌ Invalid format: $commit_msg"
            exit 1
          fi
        done

    # Setup Terraform
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.8"

    # Initialize and validate Terraform
    - name: 🏗️ Terraform Init & Validate
      run: |
        cd infra/terraform/environments/dev/app

        # Initialize Terraform (downloads modules and providers)
        echo "🔧 Initializing Terraform..."
        terraform init -no-color

        # Validate configuration
        echo "✅ Validating Terraform configuration..."
        terraform validate -no-color

        echo "🎉 Terraform validation completed successfully!"

    # Security scan for IaC
    - name: 🔒 Infrastructure Security Scan
      run: |
        echo "🔍 Running infrastructure security checks..."

        # Install Trivy if not available
        if ! command -v trivy &> /dev/null; then
          echo "📦 Installing Trivy..."
          # Download and install Trivy
          TRIVY_VERSION="0.50.4"
          wget -q "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"
          tar -xzf "trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"
          sudo mv trivy /usr/local/bin/
          rm "trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"
          echo "✅ Trivy installed successfully"
        fi

        # Verify Trivy installation
        trivy --version

        # Create output directory if it doesn't exist
        mkdir -p .trivy

        # Run Trivy config scan with better error handling
        echo "🔍 Scanning Terraform configuration for security issues..."
        if trivy config --format sarif --output security-results.sarif infra/terraform/ 2>/dev/null; then
          echo "✅ Security scan completed successfully"

          # Check if file was created and has content
          if [ -s security-results.sarif ]; then
            echo "📄 SARIF file created with $(wc -l < security-results.sarif) lines"
          else
            echo "⚠️  SARIF file created but empty, creating minimal valid file"
            echo '{"version":"2.1.0","runs":[]}' > security-results.sarif
          fi
        else
          echo "⚠️  Trivy scan encountered issues, creating minimal SARIF file"
          # Create minimal valid SARIF file
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Trivy","version":"0.50.4","informationUri":"https://github.com/aquasecurity/trivy"}},"results":[]}]}' > security-results.sarif
        fi

        echo "🎉 Security scan process completed"

    - name: 📤 Upload Security Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'security-results.sarif'
        category: 'infrastructure'
