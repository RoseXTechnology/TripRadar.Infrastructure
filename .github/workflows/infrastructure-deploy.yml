name: Deploy TripRadar Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      confirm_production:
        description: 'Type "CONFIRM" to deploy to production'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'bicep/**'
      - '.github/workflows/infrastructure-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'bicep/**'
      - '.github/workflows/infrastructure-deploy.yml'

env:
  AZURE_REGION: 'North Europe'
  APP_NAME: 'tripradar'

jobs:
  validate:
    name: Validate Bicep Templates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/CLI@v2
        with:
          azcliversion: latest

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate Bicep Templates
        run: |
          echo "Validating Bicep templates..."
          
          # Validate main template
          az deployment sub validate \
            --location "${{ env.AZURE_REGION }}" \
            --template-file bicep/deploy.bicep \
            --parameters bicep/parameters/dev.bicepparam \
            --parameters keyVaultAdminObjectId="${{ secrets.KEYVAULT_ADMIN_OBJECT_ID }}" \
            --parameters postgresqlAdminUsername="${{ secrets.POSTGRESQL_ADMIN_USERNAME }}" \
            --parameters postgresqlAdminPassword="${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}"
          
          echo "✅ Validation completed successfully"

      - name: Bicep Lint
        run: |
          echo "Running Bicep linter..."
          az bicep build --file bicep/deploy.bicep
          az bicep build --file bicep/main.bicep
          echo "✅ Linting completed successfully"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov (Infrastructure Security Scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: bicep/
          framework: bicep
          output_format: sarif
          output_file_path: reports/checkov.sarif
          
      - name: Upload Checkov SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/checkov.sarif

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: 
      name: development
      url: ${{ steps.deploy.outputs.main_api_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Infrastructure
        id: deploy
        run: |
          echo "Deploying to Development environment..."
          
          DEPLOYMENT_NAME="tripradar-infra-dev-$(date +%Y%m%d-%H%M%S)"
          
          az deployment sub create \
            --name "$DEPLOYMENT_NAME" \
            --location "${{ env.AZURE_REGION }}" \
            --template-file bicep/deploy.bicep \
            --parameters bicep/parameters/dev.bicepparam \
            --parameters keyVaultAdminObjectId="${{ secrets.KEYVAULT_ADMIN_OBJECT_ID }}" \
            --parameters postgresqlAdminUsername="${{ secrets.POSTGRESQL_ADMIN_USERNAME }}" \
            --parameters postgresqlAdminPassword="${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}" \
            --output json > deployment-output.json
          
          # Extract outputs
          MAIN_API_URL=$(cat deployment-output.json | jq -r '.properties.outputs.quickAccess.value.mainApiUrl')
          RESOURCE_GROUP_NAME=$(cat deployment-output.json | jq -r '.properties.outputs.resourceGroup.value.name')
          
          echo "main_api_url=$MAIN_API_URL" >> $GITHUB_OUTPUT
          echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
          
          echo "✅ Development deployment completed"
          echo "📍 Resource Group: $RESOURCE_GROUP_NAME"
          echo "🌐 Main API URL: $MAIN_API_URL"

      - name: Run Deployment Tests
        run: |
          echo "Running post-deployment tests..."
          
          # Wait for services to be ready
          sleep 60
          
          # Test main API endpoint
          if curl -f -s "${{ steps.deploy.outputs.main_api_url }}/health" > /dev/null; then
            echo "✅ Main API health check passed"
          else
            echo "❌ Main API health check failed"
            exit 1
          fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.main_api_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Infrastructure
        id: deploy
        run: |
          echo "Deploying to Staging environment..."
          
          DEPLOYMENT_NAME="tripradar-infra-staging-$(date +%Y%m%d-%H%M%S)"
          
          az deployment sub create \
            --name "$DEPLOYMENT_NAME" \
            --location "${{ env.AZURE_REGION }}" \
            --template-file bicep/deploy.bicep \
            --parameters bicep/parameters/staging.bicepparam \
            --parameters keyVaultAdminObjectId="${{ secrets.KEYVAULT_ADMIN_OBJECT_ID }}" \
            --parameters postgresqlAdminUsername="${{ secrets.POSTGRESQL_ADMIN_USERNAME }}" \
            --parameters postgresqlAdminPassword="${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}" \
            --output json > deployment-output.json
          
          # Extract outputs
          MAIN_API_URL=$(cat deployment-output.json | jq -r '.properties.outputs.quickAccess.value.mainApiUrl')
          RESOURCE_GROUP_NAME=$(cat deployment-output.json | jq -r '.properties.outputs.resourceGroup.value.name')
          
          echo "main_api_url=$MAIN_API_URL" >> $GITHUB_OUTPUT
          echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
          
          echo "✅ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod' && github.event.inputs.confirm_production == 'CONFIRM'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.main_api_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Infrastructure
        id: deploy
        run: |
          echo "Deploying to Production environment..."
          
          DEPLOYMENT_NAME="tripradar-infra-prod-$(date +%Y%m%d-%H%M%S)"
          
          az deployment sub create \
            --name "$DEPLOYMENT_NAME" \
            --location "${{ env.AZURE_REGION }}" \
            --template-file bicep/deploy.bicep \
            --parameters bicep/parameters/prod.bicepparam \
            --parameters keyVaultAdminObjectId="${{ secrets.KEYVAULT_ADMIN_OBJECT_ID }}" \
            --parameters postgresqlAdminUsername="${{ secrets.POSTGRESQL_ADMIN_USERNAME }}" \
            --parameters postgresqlAdminPassword="${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}" \
            --output json > deployment-output.json
          
          # Extract outputs
          MAIN_API_URL=$(cat deployment-output.json | jq -r '.properties.outputs.quickAccess.value.mainApiUrl')
          RESOURCE_GROUP_NAME=$(cat deployment-output.json | jq -r '.properties.outputs.resourceGroup.value.name')
          
          echo "main_api_url=$MAIN_API_URL" >> $GITHUB_OUTPUT
          echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
          
          echo "✅ Production deployment completed"

      - name: Run Production Health Checks
        run: |
          echo "Running production health checks..."
          
          # Wait for services to be ready
          sleep 120
          
          # Comprehensive health checks
          ENDPOINTS=(
            "${{ steps.deploy.outputs.main_api_url }}/health"
            "${{ steps.deploy.outputs.main_api_url }}/ready"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            if curl -f -s "$endpoint" > /dev/null; then
              echo "✅ Health check passed: $endpoint"
            else
              echo "❌ Health check failed: $endpoint"
              exit 1
            fi
          done

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "🎉 Infrastructure deployment completed successfully!"
          
      - name: Notify Failure
        if: needs.deploy-dev.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "❌ Infrastructure deployment failed!"
          exit 1
