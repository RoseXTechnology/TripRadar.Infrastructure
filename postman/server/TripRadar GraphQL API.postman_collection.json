{
	"info": {
		"_postman_id": "f7dcf636-6e7d-4bfd-87b8-b1b8f6828581",
		"name": "TripRadar GraphQL API",
		"description": "Comprehensive GraphQL API collection for TripRadar travel services. Includes Maps, Local Places, Events, Flights, Hotels, Place Reviews, Charging Stations, Weather, Currency Exchange, Holidays, Points of Interest, and Public Transport APIs with example queries.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39446265"
	},
	"item": [
		{
			"name": "üó∫Ô∏è Maps API",
			"item": [
				{
					"name": "Get Place by Place ID - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPlaceDetails {\n  maps(request: {\n    username: \"{{testUsername}}\"\n    placeId: \"ChIJN1t_tDeuEmsRUsoyG83frY4\"\n  }) {\n    searchMetadata {\n      id\n      status\n      totalTimeTaken\n    }\n    searchParameters {\n      engine\n      placeId\n      googleDomain\n      hl\n      gl\n    }\n    placeResults {\n      title\n      placeId\n      address\n      rating\n      reviews\n      website\n      phone\n      type\n      price\n      description\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      serviceOptions {\n        dineIn\n        takeout\n        delivery\n      }\n      userReviews {\n        summary {\n          snippet\n        }\n        mostRelevant {\n          username\n          rating\n          description\n          date\n        }\n      }\n      images {\n        title\n        thumbnail\n      }\n      hours\n      openState\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get comprehensive place details using Google Place ID. Returns detailed information including reviews, photos, hours, and contact information."
					},
					"response": []
				},
				{
					"name": "Search Places by Query with Location - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchCoffeeShops {\n  maps(request: {\n    username: \"{{testUsername}}\"\n    searchQuery: { q: \"coffee shop\" }\n    type: \"search\"\n    ll: \"@40.7455096,-74.0083012,14z\"\n    localization: {\n      gl: \"us\"\n      hl: \"en\"\n      currency: \"USD\"\n      googleDomain: \"google.com\"\n    }\n    pagination: { start: 0 }\n  }) {\n    searchMetadata {\n      id\n      status\n      totalTimeTaken\n    }\n    searchParameters {\n      engine\n      placeId\n      googleDomain\n      hl\n      gl\n    }\n    placeResults {\n      title\n      placeId\n      address\n      rating\n      reviews\n      website\n      phone\n      type\n      price\n      description\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      serviceOptions {\n        dineIn\n        takeout\n        delivery\n      }\n      userReviews {\n        summary {\n          snippet\n        }\n        mostRelevant {\n          username\n          rating\n          description\n          date\n        }\n      }\n      images {\n        title\n        thumbnail\n      }\n      hours\n      openState\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for places using a query term with geographic location. Useful for finding businesses near specific coordinates."
					},
					"response": []
				},
				{
					"name": "Search with French Localization - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchMuseumsParis {\n  maps(request: {\n    username: \"{{testUsername}}\"\n    searchQuery: { q: \"museum\" }\n    type: \"search\"\n    ll: \"@48.8588443,2.2943506,15z\"\n    localization: {\n      gl: \"fr\"\n      hl: \"fr\"\n      currency: \"EUR\"\n      googleDomain: \"google.fr\"\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n    }\n    searchParameters {\n      engine\n      type\n      googleDomain\n      hl\n      gl\n    }\n    placeResults {\n      title\n      address\n      rating\n      reviews\n      type\n      price\n      description\n      website\n      phone\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Example of localized search using French language and country settings. Demonstrates international usage."
					},
					"response": []
				},
				{
					"name": "Get Place with Fresh Data (No Cache) - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetFreshPlaceData {\n  maps(request: {\n    username: \"{{testUsername}}\"\n    placeId: \"ChIJN1t_tDeuEmsRUsoyG83frY4\"\n    noCache: true\n  }) {\n    searchMetadata {\n      id\n      status\n      totalTimeTaken\n    }\n    placeResults {\n      title\n      rating\n      reviews\n      openState\n      phone\n      website\n      address\n      popularTimes {\n        graphResults\n        liveHash {\n          info\n          timeSpent\n        }\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Forces fresh data retrieval bypassing cache. Useful when you need the most current information about a place."
					},
					"response": []
				},
				{
					"name": "Search with Pagination - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchWithPagination {\n  maps(request: {\n    username: \"{{testUsername}}\"\n    searchQuery: { q: \"restaurant\" }\n    type: \"search\"\n    ll: \"@51.5074,-0.1278,13z\"\n    localization: {\n      gl: \"uk\"\n      hl: \"en\"\n      currency: \"GBP\"\n      googleDomain: \"google.co.uk\"\n    }\n    pagination: { start: 10 }\n  }) {\n    searchMetadata {\n      id\n      status\n    }\n    placeResults {\n      title\n      address\n      rating\n      reviews\n      type\n      price\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Demonstrates pagination for search results. Use start parameter to get additional results."
					},
					"response": []
				}
			],
			"description": "Maps API endpoints for getting detailed place information from Google Maps via SerpAPI."
		},
		{
			"name": "üè¢ Local Places API",
			"item": [
				{
					"name": "Search Restaurants with Filters - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchRestaurants {\n  localPlaces(request: {\n    username: \"{{testUsername}}\"\n    searchQuery: {\n      q: \"restaurants\"\n    }\n    advancedParameters: {\n      location: \"New York, NY\"\n      uule: \"\"\n    }\n    filters: {\n      tbs: \"lf:1,lf_ui:9\"  # Open now filter\n    }\n    pagination: {\n      start: 0\n    }\n    localization: {\n      gl: \"us\"\n      hl: \"en\"\n      currency: \"USD\"\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n      totalTimeTaken\n    }\n    searchParameters {\n      engine\n      q\n      locationRequested    \n      locationUsed         \n      hl\n      gl\n    }\n    localResults {\n      position\n      title\n      placeId\n      address\n      rating\n      reviews              \n      price                \n      type\n      thumbnail\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      hours               \n      links {\n        website            \n        directions\n        order\n      }\n      serviceOptions {\n        dineIn\n        takeout\n        delivery\n        reservable\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for restaurants with advanced filtering, sorting, and pagination options."
					},
					"response": []
				},
				{
					"name": "Search by GPS Coordinates - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchByGPS {\n  localPlaces(request: {\n    username: \"{{testUsername}}\"\n    searchQuery: {\n      q: \"coffee\"\n    }\n    advancedParameters: {\n      location: \"37.7749,-122.4194\"\n      uule: \"\"\n    }\n    filters: {\n      tbs: \"lf:1,lf_ui:9\" \n    }\n    pagination: {\n      start: 0\n    }\n    localization: {\n      gl: \"us\"\n      hl: \"en\"\n      currency: \"USD\"\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n      totalTimeTaken\n    }\n    localResults {\n      position\n      title\n      address\n      rating\n      reviews             \n      placeId\n      type\n      price\n      hours              \n      phone\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      serviceOptions {\n        dineIn\n        takeout\n        delivery\n      }\n      links {\n        website\n        directions\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for places using GPS coordinates instead of location name."
					},
					"response": []
				}
			],
			"description": "Local Places API for searching local businesses with filtering and sorting capabilities."
		},
		{
			"name": "üé´ Events API",
			"item": [
				{
					"name": "Search Events in New York - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchEvents {\n  events(request: {\n    username: \"{{testUsername}}\"\n    search: {\n      q: \"concerts\"\n    }\n    geographicLocation: {\n      location: \"New York, NY\"\n    }\n    localization: {\n      gl: \"us\"\n      hl: \"en\"\n      currency: \"USD\"\n    }\n    filters: {\n      htichips: [\"date:today\"]\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n      totalTimeTaken\n    }\n    searchParameters {\n      query\n      engine\n    }\n    searchInformation {\n      totalResults\n    }\n    eventsResults {\n      title\n      description\n      address\n      link\n      thumbnail\n      date {\n        startDate\n        when\n      }\n      venue {\n        name\n        rating\n        reviews\n        link\n      }\n      ticketInfo {\n        source\n        link\n        linkType\n      }\n      eventLocationMap {\n        image\n        link\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for events like concerts, shows, and activities in New York with date and type filters."
					},
					"response": []
				},
				{
					"name": "Search Theater Events in London with Date Filter - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchTheaterEvents {\n  events(request: {\n    username: \"{{testUsername}}\"\n    search: {\n      q: \"theater shows\"\n    }\n    geographicLocation: {\n      location: \"London\"\n    }\n    localization: {\n      gl: \"uk\"\n      hl: \"en\"\n      currency: \"GBP\"\n    }\n    filters: {\n      htichips: [\"date:weekend\"]\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n    }\n    eventsResults {\n      title\n      description\n      address\n      date {\n        startDate\n        when\n      }\n      venue {\n        name\n        rating\n      }\n      ticketInfo {\n        source\n        link\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for theater events in London with weekend date filter and theater type filter."
					},
					"response": []
				}
			],
			"description": "Events API for finding events and activities in specified locations."
		},
		{
			"name": "‚úàÔ∏è Flights API",
			"item": [
				{
					"name": "Search Round Trip Flights - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchRoundTripFlights {\n  flights(request: {\n    username: \"{{testUsername}}\"\n    flightSearch: {\n      departureId: \"SOF\"\n      arrivalId: \"VIE\"\n    }\n    advancedOptions: {\n      type: OneWay\n      outboundDate: \"2025-09-15\"\n    #   returnDate: \"2025-09-22\"\n      travelClass: Economy\n    }\n    passengers: {\n    #   adults: 2\n    #   children: 1\n    #   infantsOnLap: 0\n    }\n    localization: {\n      gl: \"us\"\n      hl: \"en\"\n      currency: \"USD\"\n    }\n    sorting: {\n      sortBy: Price\n    }\n    filters: {\n      stops: OneStopOrFewer\n      bags: 1\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n      totalTimeTaken\n    }\n    searchParameters {\n      engine\n      departureId\n      arrivalId\n      outboundDate\n      travelClass\n      adults\n      currency\n    }\n    bestFlights {\n      flights {\n        departureAirport {\n          name\n          code\n          time\n        }\n        arrivalAirport {\n          name\n          code\n          time\n        }\n        duration\n        airline\n        flightNumber\n        travelClass\n      }\n      layovers {\n        name\n        duration\n      }\n      totalDuration\n      price\n      carbonEmissions {\n        thisFlight\n        typicalForThisRoute\n        differencePercent\n      }\n      bookingToken\n    }\n    otherFlights {\n      price\n      totalDuration\n      flights {\n        airline\n        flightNumber\n        departureAirport {\n          name\n          time\n        }\n        arrivalAirport {\n          name\n          time\n        }\n      }\n    }\n    priceInsights {\n      lowestPrice\n      priceLevel\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for round-trip flights from JFK to LAX with passenger details, filters, and sorting options."
					},
					"response": []
				},
				{
					"name": "Search One Way International Flight - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchOneWayFlight {\n  flights(request: {\n    username: \"{{testUsername}}\"\n    flightSearch: {\n      departureId: \"LHR\"\n      arrivalId: \"CDG\"\n    }\n    advancedOptions: {\n      type: OneWay\n      outboundDate: \"2025-08-10\"\n      travelClass: Business\n    }\n    passengers: {\n      adults: 1\n    }\n    localization: {\n      gl: \"uk\"\n      hl: \"en\"\n      currency: \"GBP\"\n    }\n    sorting: {\n      sortBy: DepartureTime\n    }\n    filters: {\n      stops: Nonstop\n      includeAirlines: \"BA,AF\"\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n    }\n    bestFlights {\n      flights {\n        departureAirport {\n          name\n          code\n          time\n        }\n        arrivalAirport {\n          name\n          code\n          time\n        }\n        airline\n        flightNumber\n        duration\n        travelClass\n      }\n      price\n      totalDuration\n      bookingToken\n    }\n    airports {\n      departure {\n        airport {\n          id\n          name\n        }\n        city\n        country\n      }\n      arrival {\n        airport {\n          id\n          name\n        }\n        city\n        country\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for one-way business class flights from London to Paris with nonstop filter and specific airlines."
					},
					"response": []
				}
			],
			"description": "Flights API for searching flight options and pricing information."
		},
		{
			"name": "üè® Hotels API",
			"item": [
				{
					"name": "Search Hotels with Filters - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchHotels {\n  hotels(request: {\n    username: \"{{testUsername}}\"\n    searchQuery: {\n      q: \"hotels in Manhattan\"\n    }\n    advancedParameters: {\n      checkInDate: \"2025-09-15\"\n      checkOutDate: \"2025-09-18\"\n    #   adults: 2\n      children: 2\n      childrenAges: [8, 11]\n    }\n    localization: {\n      gl: \"us\"\n      hl: \"en\"\n      currency: \"USD\"\n    }\n    filters: {\n      sortBy: HighestRating\n      minPrice: 150\n      maxPrice: 400\n      rating: Rating40Plus\n      freeCancellation: true\n      propertyTypes: [\"BeachHotels\", \"BoutiqueHotels\"]\n      amenities: [\"FreeWiFi\", \"FitnessCenter\", \"Restaurant\"]\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n      totalTimeTaken\n    }\n    searchParameters {\n      engine\n      query\n      checkInDate\n      checkOutDate\n      adults\n      children\n      currency\n    }\n    searchInformation {\n      totalResults\n    }\n    properties {\n      name\n      description\n      type\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      hotelClass\n      extractedHotelClass\n      overallRating\n      reviews\n      locationRating\n      ratePerNight {\n        lowest\n        extractedLowest\n      }\n      totalRate {\n        lowest\n        extractedLowest\n      }\n      amenities\n      ecoCertified\n      images {\n        thumbnail\n        originalImage\n      }\n      nearbyPlaces {\n        name\n        transportations {\n          type\n          duration\n        }\n      }\n      reviewsBreakdown {\n        name\n        positive\n        negative\n        totalMentioned\n      }\n      checkInTime\n      checkOutTime\n      propertyToken\n    }\n    serpapiPagination {\n      nextPageToken\n      currentFrom\n      currentTo\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for hotels in Manhattan with comprehensive filters including rating, price range, amenities, and property types."
					},
					"response": []
				},
				{
					"name": "Search Vacation Rentals - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchVacationRentals {\n  hotels(request: {\n    username: \"{{testUsername}}\"\n    searchQuery: {\n      q: \"vacation rentals in Miami Beach\"\n    }\n    advancedParameters: {\n      checkInDate: \"2025-10-01\"\n      checkOutDate: \"2025-10-07\"\n      adults: 4\n      children: 2\n      childrenAges: [10, 12]\n    }\n    localization: {\n      gl: \"us\"\n      hl: \"en\"\n      currency: \"USD\"\n    }\n    vacationRentalsFilters: {\n      vacationRentals: true\n      bedrooms: 3\n      bathrooms: 2\n    }\n    filters: {\n      propertyTypes:  [\"Villas\", \"Houses\"]\n      amenities: [\"Pool\", \"Kitchen\", \"BeachAccess\"]\n      maxPrice: 500\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n    }\n    properties {\n      name\n      description\n      type\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      overallRating\n      reviews\n      ratePerNight {\n        lowest\n        extractedLowest\n      }\n      amenities\n      images {\n        thumbnail\n      }\n      nearbyPlaces {\n        name\n        transportations {\n          type\n          duration\n        }\n      }\n      propertyToken\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for vacation rentals in Miami Beach with specific bedroom/bathroom requirements and vacation rental amenities."
					},
					"response": []
				}
			],
			"description": "Hotels API for finding hotel accommodations and vacation rentals with pricing and availability."
		},
		{
			"name": "‚≠ê Place Reviews API",
			"item": [
				{
					"name": "Get Place Reviews by Place ID -‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPlaceReviews {\n  placeReviews(request: {\n    username: \"{{testUsername}}\"\n    placeId: \"ChIJN1t_tDeuEmsRUsoyG83frY4\"\n    localization: {\n      gl: \"us\"\n      hl: \"en\"\n      currency: \"USD\"\n    }\n    filters: {\n      sortBy: \"ratingHigh\"\n    }\n  }) {\n    searchMetadata {\n      id\n      status\n      totalTimeTaken\n    }\n    searchParameters {\n      engine\n      placeId\n      sortBy\n      hl\n      num\n    }\n    placeInfo {\n      title\n      placeId\n      dataId\n      rating\n      reviews\n      type\n      types\n      address\n      phone\n      website\n      description\n      price\n      openState\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      operatingHours {\n        monday\n        tuesday\n        wednesday\n        thursday\n        friday\n        saturday\n        sunday\n      }\n      editorialSummary {\n        overview\n      }\n      userReview {\n        rating\n        snippet\n      }\n    }\n    topics {\n      keyword\n      mentions\n      id\n    }\n    reviews {\n      position\n      user {\n        name\n        contributorId\n        thumbnail\n        localGuide\n        reviews\n        photos\n      }\n      rating\n      date\n      isoDate\n      snippet\n      extractedSnippet {\n        original\n      }\n      likes\n      images\n      source\n      reviewId\n      details {\n        service\n        mealType\n        pricePerPerson\n        food\n        atmosphere\n        recommendedDishes\n        vegetarianOptions\n        dietaryRestrictions\n        kidFriendliness\n        wheelchairAccessibility\n      }\n      response {\n        date\n        snippet\n      }\n    }\n    pagination {\n      nextPageToken\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get comprehensive reviews for a specific place using place_id from Maps API. Includes place info, review topics, and detailed reviews."
					},
					"response": []
				}
			],
			"description": "Place Reviews API for retrieving comprehensive reviews for specific places identified by place_id or data_id."
		},
		{
			"name": "üîå Charging Stations API",
			"item": [
				{
					"name": "Search Charging Stations by Location - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchChargingStations {\n  chargingStations(request: {\n    username: \"{{testUsername}}\"\n    latitude: 40.7128\n    longitude: -74.0060\n    # distance: 10\n    # distanceUnit: \"KM\"\n    maxResults: 20\n    countryCode: \"US\"\n    openData: true\n    includeComments: true\n  }) {\n    timestamp\n    chargingStations {\n      id\n      uuid\n      title\n      usageCost\n      operatorInfo {\n        id\n        title\n        websiteUrl\n        comments\n        phonePrimaryContact\n        contactEmail\n        isPrivateIndividual\n      }\n      usageType {\n        id\n        title\n        isPayAtLocation\n        isMembershipRequired\n        isAccessKeyRequired\n      }\n      addressInfo {\n        id\n        title\n        addressLine1\n        addressLine2\n        town\n        stateOrProvince\n        postcode\n        country {\n          id\n          isoCode\n          title\n        }\n        latitude\n        longitude\n        contactTelephone1\n        contactEmail\n        accessComments\n        relatedUrl\n        distance\n      }\n      connections {\n        id\n        connectionType {\n          id\n          title\n          formalName\n          isDiscontinued\n          isObsolete\n        }\n        reference\n        statusType {\n          id\n          title\n          isOperational\n          isUserSelectable\n        }\n        level {\n          id\n          title\n          comments\n          isFastChargeCapable\n        }\n        amps\n        voltage\n        powerKw\n        currentType {\n          id\n          title\n        }\n        quantity\n        comments\n      }\n      numberOfPoints\n      generalComments\n      dateLastConfirmed\n      statusType {\n        id\n        title\n        isOperational\n        isUserSelectable\n      }\n      dataProvider {\n        id\n        title\n        websiteUrl\n        license\n        isOpenDataLicensed\n      }\n      isRecentlyVerified\n      dateLastVerified\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for electric vehicle charging stations near New York City with comprehensive station details including connections, operators, and status information."
					},
					"response": []
				},
				{
					"name": "Search with Connector Type Filter - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchByConnectorType {\n  chargingStations(request: {\n    username: \"{{testUsername}}\"\n    latitude: 34.0522\n    longitude: -118.2437\n    distance: 15\n    distanceUnit: \"Miles\"\n    maxResults: 10\n    connectionTypeIds: [25, 1036]\n    levelIds: [3]\n    statusTypeIds: [50]\n    openData: true\n  }) {\n    timestamp\n    chargingStations {\n      id\n      title\n      operatorInfo {\n        id\n        title\n        websiteUrl\n        phonePrimaryContact\n        contactEmail\n      }\n      addressInfo {\n        id\n        title\n        addressLine1\n        town\n        stateOrProvince\n        postcode\n        latitude\n        longitude\n        accessComments\n        distance\n      }\n      connections {\n        id\n        connectionType {\n          id\n          title\n          formalName\n        }\n        level {\n          id\n          title\n          isFastChargeCapable\n        }\n        powerKw\n        quantity\n        statusType {\n          id\n          title\n          isOperational\n        }\n      }\n      numberOfPoints\n      statusType {\n        id\n        title\n        isOperational\n      }\n      generalComments\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for Tesla Supercharger and CCS fast charging stations in Los Angeles area with specific connector type and level filters."
					},
					"response": []
				},
				{
					"name": "Search by Operator Network - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchByOperator {\n  chargingStations(request: {\n    username: \"{{testUsername}}\"\n    latitude: 51.5074\n    longitude: -0.1278\n    distance: 20\n    distanceUnit: \"KM\"\n    maxResults: 15\n    operatorIds: [3, 44]\n    usageTypeIds: [1, 4]\n    countryCode: \"GB\"\n    openData: false\n  }) {\n    timestamp\n    chargingStations {\n      id\n      title\n      operatorInfo {\n        id\n        title\n        websiteUrl\n        contactEmail\n        comments\n      }\n      usageType {\n        id\n        title\n        isPayAtLocation\n        isMembershipRequired\n      }\n      addressInfo {\n        id\n        title\n        town\n        country {\n          id\n          title\n          isoCode\n        }\n        latitude\n        longitude\n        distance\n      }\n      connections {\n        id\n        connectionType {\n          id\n          title\n        }\n        level {\n          id\n          title\n        }\n        powerKw\n        quantity\n      }\n      numberOfPoints\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for Tesla and ChargePoint charging stations in London area with operator-specific filtering."
					},
					"response": []
				},
				{
					"name": "Search with Bounding Box - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchByBoundingBox {\n  chargingStations(request: {\n    username: \"{{testUsername}}\"\n    boundingBox: \"(37.7,-122.5),(37.8,-122.3)\"\n    maxResults: 25\n    levelIds: [2, 3]\n    statusTypeIds: [50]\n    includeComments: true\n  }) {\n    timestamp\n    chargingStations {\n      id\n      title\n      operatorInfo {\n        id\n        title\n      }\n      addressInfo {\n        id\n        title\n        addressLine1\n        town\n        latitude\n        longitude\n        distance\n      }\n      connections {\n        id\n        connectionType {\n          id\n          title\n        }\n        level {\n          id\n          title\n          isFastChargeCapable\n        }\n        powerKw\n        amps\n        voltage\n        quantity\n      }\n      numberOfPoints\n      generalComments\n      dateLastConfirmed\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for charging stations within a specific bounding box area (San Francisco Bay Area) with Level 2 and DC fast charging options."
					},
					"response": []
				},
				{
					"name": "Minimal Charging Station Info - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query MinimalChargingStations {\n  chargingStations(request: {\n    username: \"{{testUsername}}\"\n    latitude: 47.6062\n    longitude: -122.3321\n    distance: 5\n    maxResults: 10\n  }) {\n    timestamp\n    chargingStations {\n      id\n      title\n      operatorInfo {\n        id\n        title\n      }\n      addressInfo {\n        id\n        title\n        town\n        latitude\n        longitude\n        distance\n      }\n      connections {\n        id\n        connectionType {\n          id\n          title\n        }\n        powerKw\n        quantity\n      }\n      numberOfPoints\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get minimal charging station information (basic fields only) for quick location and availability checks in Seattle area."
					},
					"response": []
				},
				{
					"name": "Charging Stations Validation Error - ‚ùå",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 (GraphQL errors in response)', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('GraphQL validation errors are returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('errors');",
									"    pm.expect(responseJson.errors).to.be.an('array');",
									"    pm.expect(responseJson.errors[0]).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ChargingStationsValidationError {\n  chargingStations(request: {\n    username: \"{{testUsername}}\"\n    distance: 50\n    maxResults: 1000\n  }) {\n    chargingStations {\n      id\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Example of validation errors: Missing location parameters (latitude/longitude or boundingBox) and invalid maxResults (>100). Shows validation error messages."
					},
					"response": []
				}
			],
			"description": "Charging Stations API for finding electric vehicle charging stations using Open Charge Map data. Supports location-based search, connector type filtering, operator networks, and comprehensive station details.\n\n**IMPORTANT SEARCH PARAMETERS:**\n- Provide either latitude/longitude OR boundingBox for location\n- Distance unit can be \"KM\" or \"Miles\" (case-sensitive)\n- MaxResults must be between 1 and 100\n- Username is always required\n\n**Common Filter IDs:**\n- Connection Types: Tesla Supercharger (25), CCS Type 1 (1036), CHAdeMO (2), Type 2 (25)\n- Levels: Level 1 (1), Level 2 (2), DC Fast Charging (3)\n- Status: Operational (50), Unknown (0), Not Operational (100)\n- Usage Types: Public (1), Private (2), Public - Membership Required (4)\n\n**Bounding Box Format:**\n- Format: \"(lat1,lng1),(lat2,lng2)\"\n- Example: \"(37.7,-122.5),(37.8,-122.3)\"\n\n**Common Errors:**\n- Missing location parameters (latitude/longitude or boundingBox)\n- Invalid distance unit (must be \"KM\" or \"Miles\")\n- MaxResults > 100 or < 1\n- Invalid bounding box format"
		},
		{
			"name": "üå§Ô∏è Weather API",
			"item": [
				{
					"name": "Get Current Weather by City Name - ‚úÖ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Weather data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.weather).to.have.property('location');",
									"    pm.expect(responseJson.data.weather).to.have.property('current');",
									"    pm.expect(responseJson.data.weather.current).to.have.property('temperature');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetWeatherByCity {\n  weather(request: {\n    username: \"{{testUsername}}\"\n    cityName: \"New York\"\n    units: METRIC\n    includeForecast: false\n  }) {\n    location {\n      cityName\n      country\n      latitude\n      longitude\n      timezone\n    }\n    current {\n      temperature\n      feelsLike\n      minTemperature\n      maxTemperature\n      pressure\n      seaLevelPressure\n      groundLevelPressure\n      humidity\n      dewPoint\n      uvIndex\n      visibility\n      wind {\n        speed\n        direction\n        gust\n      }\n      clouds {\n        coverage\n      }\n      condition {\n        id\n        main\n        description\n        icon\n      }\n      rain {\n        oneHour\n        threeHour\n      }\n      snow {\n        oneHour\n        threeHour\n      }\n      sunrise\n      sunset\n    }\n    timestamp\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get current weather information for a specific city using metric units (Celsius, m/s)."
					},
					"response": []
				},
				{
					"name": "Get Weather by GPS Coordinates - ‚úÖ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Weather data with coordinates is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.weather.location).to.have.property('latitude');",
									"    pm.expect(responseJson.data.weather.location).to.have.property('longitude');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetWeatherByCoordinates {\n  weather(request: {\n    username: \"{{testUsername}}\"\n    latitude: 40.7128\n    longitude: -74.0060\n    units: IMPERIAL\n    includeForecast: false\n  }) {\n    location {\n      cityName\n      country\n      latitude\n      longitude\n      timezone\n    }\n    current {\n      temperature\n      feelsLike\n      minTemperature\n      maxTemperature\n      pressure\n      humidity\n      wind {\n        speed\n        direction\n        gust\n      }\n      clouds {\n        coverage\n      }\n      condition {\n        main\n        description\n        icon\n      }\n      sunrise\n      sunset\n    }\n    timestamp\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get current weather using GPS coordinates (NYC) with imperial units (Fahrenheit, mph)."
					},
					"response": []
				},
				{
					"name": "Get Weather with 5-Day Forecast - ‚úÖ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Weather forecast data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.weather).to.have.property('forecast');",
									"    pm.expect(responseJson.data.weather.forecast).to.be.an('array');",
									"    pm.expect(responseJson.data.weather.forecast.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetWeatherWithForecast {\n  weather(request: {\n    username: \"{{testUsername}}\"\n    cityName: \"London\"\n    units: METRIC\n    includeForecast: true\n    forecastDays: 5\n  }) {\n    location {\n      cityName\n      country\n      latitude\n      longitude\n      timezone\n    }\n    current {\n      temperature\n      feelsLike\n      humidity\n      pressure\n      wind {\n        speed\n        direction\n      }\n      condition {\n        main\n        description\n        icon\n      }\n      sunrise\n      sunset\n    }\n    forecast {\n      dateTime\n      temperature\n      feelsLike\n      minTemperature\n      maxTemperature\n      pressure\n      humidity\n      wind {\n        speed\n        direction\n        gust\n      }\n      clouds {\n        coverage\n      }\n      condition {\n        main\n        description\n        icon\n      }\n      probabilityOfPrecipitation\n    }\n    timestamp\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get current weather and 5-day forecast for London with detailed forecast information."
					},
					"response": []
				},
				{
					"name": "Get Weather with Kelvin Units - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetWeatherKelvin {\n  weather(request: {\n    username: \"{{testUsername}}\"\n    cityName: \"Tokyo\"\n    units: KELVIN\n    includeForecast: true\n    forecastDays: 3\n  }) {\n    location {\n      cityName\n      country\n      latitude\n      longitude\n    }\n    current {\n      temperature\n      feelsLike\n      minTemperature\n      maxTemperature\n      humidity\n      pressure\n      condition {\n        main\n        description\n      }\n    }\n    forecast {\n      dateTime\n      temperature\n      minTemperature\n      maxTemperature\n      condition {\n        main\n        description\n      }\n      probabilityOfPrecipitation\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get weather data using Kelvin temperature units with 3-day forecast for Tokyo."
					},
					"response": []
				},
				{
					"name": "Get Minimal Weather Info - ‚úÖ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Minimal weather data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.weather.location).to.have.property('cityName');",
									"    pm.expect(responseJson.data.weather.current).to.have.property('temperature');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetMinimalWeather {\n  weather(request: {\n    username: \"{{testUsername}}\"\n    cityName: \"Paris\"\n    units: METRIC\n  }) {\n    location {\n      cityName\n      country\n    }\n    current {\n      temperature\n      condition {\n        main\n        description\n        icon\n      }\n      humidity\n      wind {\n        speed\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get minimal weather information (basic fields only) for quick weather checks."
					},
					"response": []
				},
				{
					"name": "Weather Validation Error Examples - ‚ùå",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 (GraphQL errors in response)', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('GraphQL validation errors are returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('errors');",
									"    pm.expect(responseJson.errors).to.be.an('array');",
									"    pm.expect(responseJson.errors[0]).to.have.property('message');",
									"    pm.expect(responseJson.errors[0].message).to.include('Units must be metric, imperial, or kelvin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query WeatherValidationError {\n  weather(request: {\n    username: \"{{testUsername}}\"\n    cityName: \"London\"\n    units: CELSIUS\n    forecastDays: 10\n  }) {\n    location {\n      cityName\n    }\n    current {\n      temperature\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Example of validation errors: Invalid units (CELSIUS instead of METRIC) and forecastDays > 5. Shows error: 'Units must be metric, imperial, or kelvin; Forecast days must be between 1 and 5'"
					},
					"response": []
				},
				{
					"name": "Weather Missing Location Error - ‚ùå",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 (GraphQL errors in response)', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Location validation error is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('errors');",
									"    pm.expect(responseJson.errors[0].message).to.include('Either city name or both latitude and longitude must be provided');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query WeatherMissingLocation {\n  weather(request: {\n    username: \"{{testUsername}}\"\n    units: METRIC\n  }) {\n    location {\n      cityName\n    }\n    current {\n      temperature\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Example of location validation error: Missing both cityName and coordinates. Shows error: 'Either city name or both latitude and longitude must be provided'"
					},
					"response": []
				}
			],
			"description": "Weather API for getting current weather conditions and forecasts using city names or GPS coordinates with various unit systems.\n\n**IMPORTANT VALIDATION RULES:**\n- Units must be METRIC, IMPERIAL, or KELVIN (uppercase)\n- Forecast days must be between 1 and 5\n- Provide either cityName OR both latitude and longitude, not both\n- Username is always required\n\n**Valid Units:**\n- METRIC: Celsius, m/s, hPa\n- IMPERIAL: Fahrenheit, mph, hPa  \n- KELVIN: Kelvin, m/s, hPa\n\n**Common Errors:**\n- Using lowercase units (metric instead of METRIC)\n- Setting forecastDays > 5 or < 1\n- Missing location parameters\n- Providing both cityName and coordinates"
		},
		{
			"name": "üí± Currency Exchange API",
			"item": [
				{
					"name": "Get Exchange Rates - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetExchangeRates {\n  exchangeRates(request: {\n    username: \"{{testUsername}}\"\n    baseCurrency: \"USD\"\n  }) {\n    baseCurrency\n    exchangeDate\n    exchangeRates {\n      currency\n      rate\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get current exchange rates for a base currency (USD) showing rates for all available currencies."
					},
					"response": []
				},
				{
					"name": "Get EUR Exchange Rates - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetEURExchangeRates {\n  exchangeRates(request: {\n    username: \"{{testUsername}}\"\n    baseCurrency: \"EUR\"\n  }) {\n    baseCurrency\n    exchangeDate\n    exchangeRates {\n      currency\n      rate\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get current exchange rates with EUR as the base currency."
					},
					"response": []
				},
				{
					"name": "Convert USD to EUR - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ConvertCurrency {\n  convertCurrency(request: {\n    username: \"{{testUsername}}\"\n    fromCurrency: \"USD\"\n    toCurrency: \"EUR\"\n    amount: 100.00\n  }) {\n    fromCurrency\n    toCurrency\n    originalAmount\n    convertedAmount\n    exchangeRate\n    conversionDate\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Convert 100 USD to EUR showing the exchange rate and converted amount."
					},
					"response": []
				},
				{
					"name": "Convert Large Amount EUR to GBP - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ConvertLargeAmount {\n  convertCurrency(request: {\n    username: \"{{testUsername}}\"\n    fromCurrency: \"EUR\"\n    toCurrency: \"GBP\"\n    amount: 2500.00\n  }) {\n    fromCurrency\n    toCurrency\n    originalAmount\n    convertedAmount\n    exchangeRate\n    conversionDate\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Convert a larger amount (2500 EUR) to GBP for testing with higher values."
					},
					"response": []
				},
				{
					"name": "Convert GBP to USD - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ConvertGBPToUSD {\n  convertCurrency(request: {\n    username: \"{{testUsername}}\"\n    fromCurrency: \"GBP\"\n    toCurrency: \"USD\"\n    amount: 50.00\n  }) {\n    fromCurrency\n    toCurrency\n    originalAmount\n    convertedAmount\n    exchangeRate\n    conversionDate\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Convert 50 GBP to USD showing reverse conversion from previous examples."
					},
					"response": []
				},
				{
					"name": "Currency Exchange Validation Error - ‚ùå",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 (GraphQL errors in response)', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('GraphQL validation errors are returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('errors');",
									"    pm.expect(responseJson.errors).to.be.an('array');",
									"    pm.expect(responseJson.errors[0]).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query CurrencyValidationError {\n  convertCurrency(request: {\n    username: \"{{testUsername}}\"\n    fromCurrency: \"INVALID\"\n    toCurrency: \"EUR\"\n    amount: -100.00\n  }) {\n    convertedAmount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Example of validation errors: Invalid currency code (INVALID) and negative amount (-100.00). Shows validation error messages."
					},
					"response": []
				}
			],
			"description": "Currency Exchange API for getting real-time exchange rates and converting between currencies using UniRateApi.\n\n**IMPORTANT VALIDATION RULES:**\n- Currency codes must be valid 3-letter ISO codes (USD, EUR, GBP, etc.)\n- Amount must be greater than 0\n- Base currency must be valid for exchange rate queries\n- Username is always required\n\n**Supported Currencies:**\n- USD (US Dollar)\n- EUR (Euro)\n- GBP (British Pound)\n- JPY (Japanese Yen)\n- CAD (Canadian Dollar)\n- AUD (Australian Dollar)\n- CHF (Swiss Franc)\n- CNY (Chinese Yuan)\n- And many more...\n\n**Common Errors:**\n- Invalid currency codes (must be 3-letter ISO codes)\n- Negative or zero amounts\n- Same from/to currencies in conversion\n- Missing required parameters (username, currencies, amount)\n\n**Features:**\n- Real-time exchange rates from UniRateApi\n- Currency conversion with precise calculations\n- Support for 100+ global currencies\n- Cached results for performance (30 minutes TTL)\n- Comprehensive error handling and validation"
		},
		{
			"name": "üéÑ Holidays API",
			"item": [
				{
					"name": "Get Holidays by Country and Year - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetHolidays {\n  holidays(request: {\n    username: \"{{testUsername}}\"\n    country: \"US\"\n    year: 2025\n  }) {\n    meta {\n      code\n    }\n    response {\n      holidays {\n        name\n        description\n        type\n        date {\n          iso\n          dateTime {\n            year\n            month\n            day\n          }\n        }\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get all holidays for the United States in 2025. Returns comprehensive holiday information including names, descriptions, types, and dates."
					},
					"response": []
				},
				{
					"name": "Get UK Holidays with Month Filter - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetUKHolidaysDecember {\n  holidays(request: {\n    username: \"{{testUsername}}\"\n    country: \"GB\"\n    year: 2025\n    month: 12\n  }) {\n    meta {\n      code\n    }\n    response {\n      holidays {\n        name\n        description\n        type\n        date {\n          iso\n          dateTime {\n            year\n            month\n            day\n          }\n        }\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get holidays for the United Kingdom in December 2025. Demonstrates month filtering for specific time periods."
					},
					"response": []
				},
				{
					"name": "Get Holidays with Day Filter - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetHolidaysSpecificDay {\n  holidays(request: {\n    username: \"{{testUsername}}\"\n    country: \"CA\"\n    year: 2025\n    month: 7\n    day: 1\n  }) {\n    meta {\n      code\n    }\n    response {\n      holidays {\n        name\n        description\n        type\n        date {\n          iso\n          dateTime {\n            year\n            month\n            day\n          }\n        }\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get holidays for Canada on July 1st, 2025 (Canada Day). Shows how to filter holidays for a specific date."
					},
					"response": []
				},
				{
					"name": "Get Religious Holidays Only - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetReligiousHolidays {\n  holidays(request: {\n    username: \"{{testUsername}}\"\n    country: \"US\"\n    year: 2025\n    type: \"religious\"\n  }) {\n    meta {\n      code\n    }\n    response {\n      holidays {\n        name\n        description\n        type\n        date {\n          iso\n          dateTime {\n            year\n            month\n            day\n          }\n        }\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get only religious holidays for the United States in 2025. Demonstrates type filtering for specific holiday categories."
					},
					"response": []
				},
				{
					"name": "Get Holidays with Location Filter - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetHolidaysWithLocation {\n  holidays(request: {\n    username: \"{{testUsername}}\"\n    country: \"US\"\n    year: 2025\n    location: \"California\"\n  }) {\n    meta {\n      code\n    }\n    response {\n      holidays {\n        name\n        description\n        type\n        date {\n          iso\n          dateTime {\n            year\n            month\n            day\n          }\n        }\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get holidays for California, USA in 2025. Shows location-specific filtering for regional holidays."
					},
					"response": []
				},
				{
					"name": "Get Multiple Holiday Types - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetNationalHolidays {\n  holidays(request: {\n    username: \"{{testUsername}}\"\n    country: \"FR\"\n    year: 2025\n    type: \"national\"\n  }) {\n    meta {\n      code\n    }\n    response {\n      holidays {\n        name\n        description\n        type\n        date {\n          iso\n          dateTime {\n            year\n            month\n            day\n          }\n        }\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get national holidays for France in 2025. Demonstrates filtering by holiday type (national, local, religious, observance)."
					},
					"response": []
				},
				{
					"name": "Holidays Validation Error - ‚ùå",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 (GraphQL errors in response)', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('GraphQL validation errors are returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('errors');",
									"    pm.expect(responseJson.errors).to.be.an('array');",
									"    pm.expect(responseJson.errors[0]).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query HolidaysValidationError {\n  holidays(request: {\n    username: \"{{testUsername}}\"\n    country: \"INVALID\"\n    year: 1800\n    month: 13\n    day: 32\n  }) {\n    response {\n      holidays {\n        name\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Example of validation errors: Invalid country code, year out of range (1900-2049), invalid month (1-12), and invalid day (1-31). Shows validation error messages."
					},
					"response": []
				}
			],
			"description": "Holidays API for retrieving national, regional, religious, and observance holidays using Calendarific API. Supports comprehensive filtering by country, year, month, day, location, and holiday type.\n\n**IMPORTANT VALIDATION RULES:**\n- Country must be valid ISO-3166 country code (US, GB, CA, FR, etc.)\n- Year must be between 1900 and 2049\n- Month must be between 1 and 12 (optional)\n- Day must be between 1 and 31 (optional)\n- Username is always required\n\n**Supported Countries:**\n- US (United States)\n- GB (United Kingdom)\n- CA (Canada)\n- FR (France)\n- DE (Germany)\n- AU (Australia)\n- JP (Japan)\n- IN (India)\n- And 230+ more countries...\n\n**Holiday Types:**\n- national: National public holidays\n- local: Regional/local holidays\n- religious: Religious observances\n- observance: Cultural observances and awareness days\n\n**Common Errors:**\n- Invalid country codes (must be ISO-3166 format)\n- Year out of supported range (1900-2049)\n- Invalid month/day values\n- Missing required parameters (username, country, year)\n\n**Features:**\n- Real-time holiday data from Calendarific API\n- Support for 230+ countries and territories\n- Comprehensive holiday information with descriptions\n- Advanced filtering by date, location, and type\n- Cached results for performance (1 hour TTL)\n- Multi-language support for holiday descriptions\n- Historical and future holiday data"
		},
		{
			"name": "üó∫Ô∏è Points of Interest API",
			"item": [
				{
					"name": "Search Museums in NYC - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchMuseumsNYC {\n  pointsOfInterest(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 40.7128\n      longitude: -74.0060\n    }\n    radius: 5000\n    categories: [\"museums\"]\n    language: \"en\"\n    limit: 20\n  }) {\n    places {\n      id\n      name\n      description\n      location {\n        latitude\n        longitude\n      }\n      categories\n      rating\n      address\n      imageUrl\n      wikipediaUrl\n      wikidataId\n      details {\n        city\n        state\n        country\n        countryCode\n        postcode\n        road\n        houseNumber\n        openingHours\n        phone\n        website\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for museums within 5km radius of New York City center. Returns comprehensive POI information including descriptions, ratings, images, and Wikipedia information."
					},
					"response": []
				},
				{
					"name": "Search Tourist Attractions in Paris - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchTouristAttractionsParis {\n  pointsOfInterest(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 48.8566\n      longitude: 2.3522\n    }\n    radius: 3000\n    categories: [\"tourist_attractions\"]\n    language: \"fr\"\n    limit: 15\n    minRating: 2\n  }) {\n    places {\n      id\n      name\n      description\n      location {\n        latitude\n        longitude\n      }\n      categories\n      rating\n      address\n      imageUrl\n      wikipediaUrl\n      wikidataId\n      details {\n        city\n        state\n        country\n        postcode\n        website\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for tourist attractions in Paris center with minimum rating of 2. Uses French language localization for descriptions."
					},
					"response": []
				},
				{
					"name": "Search Historic Architecture - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchHistoricArchitecture {\n  pointsOfInterest(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 51.5074\n      longitude: -0.1278\n    }\n    radius: 8000\n    categories: [\"architecture\", \"historic\"]\n    language: \"en\"\n    limit: 25\n    minRating: 3\n  }) {\n    places {\n      id\n      name\n      description\n      location {\n        latitude\n        longitude\n      }\n      categories\n      rating\n      address\n      imageUrl\n      wikipediaUrl\n      wikidataId\n      details {\n        city\n        country\n        road\n        openingHours\n        phone\n        website\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for historic architecture in London with high rating filter (3). Demonstrates multiple category filtering."
					},
					"response": []
				},
				{
					"name": "Search Natural Features - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchNaturalFeatures {\n  pointsOfInterest(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 37.7749\n      longitude: -122.4194\n    }\n    radius: 10000\n    categories: [\"natural\"]\n    language: \"en\"\n    limit: 10\n    minRating: 2\n  }) {\n    places {\n      id\n      name\n      description\n      location {\n        latitude\n        longitude\n      }\n      categories\n      rating\n      address\n      imageUrl\n      wikipediaUrl\n      details {\n        city\n        state\n        country\n        website\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for natural features and outdoor attractions around San Francisco Bay Area within 15km radius."
					},
					"response": []
				},
				{
					"name": "Search All Categories Small Radius - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchAllCategoriesSmallRadius {\n  pointsOfInterest(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 35.6762\n      longitude: 139.6503\n    }\n    radius: 2000\n    language: \"en\"\n    limit: 30\n    minRating: 3\n  }) {\n    places {\n      id\n      name\n      description\n      location {\n        latitude\n        longitude\n      }\n      categories\n      rating\n      address\n      imageUrl\n      wikipediaUrl\n      wikidataId\n      details {\n        city\n        state\n        country\n        countryCode\n        phone\n        website\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Search for all types of POIs in Tokyo city center with high rating filter (3) and small 2km radius."
					},
					"response": []
				},
				{
					"name": "Minimal POI Information - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query MinimalPOIInfo {\n  pointsOfInterest(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 41.9028\n      longitude: 12.4964\n    }\n    radius: 5000\n    categories: [\"museums\", \"architecture\"]\n    language: \"en\"\n    limit: 15\n  }) {\n    places {\n      id\n      name\n      categories\n      rating\n      location {\n        latitude\n        longitude\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get minimal POI information (basic fields only) for museums and architecture in Rome for quick lookups."
					},
					"response": []
				},
				{
					"name": "POI Validation Error Examples - ‚ùå",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 (GraphQL errors in response)', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('GraphQL validation errors are returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('errors');",
									"    pm.expect(responseJson.errors).to.be.an('array');",
									"    pm.expect(responseJson.errors[0]).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query POIValidationError {\n  pointsOfInterest(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 91.0\n      longitude: 181.0\n    }\n    radius: 60000\n    language: \"INVALID\"\n    limit: 1000\n    minRating: 5\n  }) {\n    places {\n      name\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Example of validation errors: Invalid coordinates (lat > 90, lng > 180), radius too large (>50km), invalid language code, limit too high (>500), and rating out of range (>3). Shows validation error messages."
					},
					"response": []
				}
			],
			"description": "Points of Interest API for discovering tourist attractions, museums, historic sites, natural features, and cultural points using OpenTripMap data. Supports location-based search with comprehensive filtering options.\n\n**IMPORTANT VALIDATION RULES:**\n- Latitude must be between -90 and 90\n- Longitude must be between -180 and 180\n- Radius must be between 100 and 50000 meters\n- Limit must be between 1 and 100\n- MinRating must be between 1 and 10 (optional)\n- Language must be valid ISO 639-1 code (en, fr, de, es, etc.)\n- Username is always required\n\n**Supported Categories:**\n- museums: Museums and galleries\n- tourist_attractions: Tourist attractions and landmarks\n- architecture: Architectural sites and buildings\n- historic: Historic sites and monuments\n- cultural: Cultural sites and centers\n- natural: Natural features and outdoor attractions\n- sport: Sports venues and facilities\n- religion: Religious sites and buildings\n\n**Supported Languages:**\n- en (English)\n- fr (French)\n- de (German)\n- es (Spanish)\n- it (Italian)\n- pt (Portuguese)\n- ru (Russian)\n- zh (Chinese)\n- ja (Japanese)\n- And many more...\n\n**Common Errors:**\n- Invalid coordinates (out of valid range)\n- Radius too large (>50km) or too small (<100m)\n- Limit exceeding maximum (>100)\n- Invalid language codes\n- Missing required parameters (username, latitude, longitude)\n\n**Features:**\n- Real-time POI data from OpenTripMap API\n- Rich POI information with descriptions and images\n- Wikipedia extracts for detailed information\n- Multi-language support for localized content\n- Geographic filtering with precise radius control\n- Category-based filtering for specific POI types\n- Rating-based filtering for quality control\n- Comprehensive POI metadata including OSM and Wikidata IDs\n- Image previews and source attribution\n- Cached results for performance optimization"
		},
		{
			"name": "üöá Public Transport API",
			"item": [
				{
					"name": "Get Transit Stops Near NYC - ‚úÖ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Transit stops data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.publicTransportStops).to.have.property('stops');",
									"    pm.expect(responseJson.data.publicTransportStops.stops).to.be.an('array');",
									"    pm.expect(responseJson.data.publicTransportStops).to.have.property('totalCount');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetTransitStopsNYC {\n  publicTransportStops(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 40.7128\n      longitude: -74.0060\n    }\n    radius: 1000\n    limit: 20\n  }) {\n    stops {\n      id\n      name\n      description\n      location {\n        latitude\n        longitude\n      }\n      platformCode\n      platformName\n      wheelchairBoarding\n      zoneId\n      stopCode\n      stopUrl\n      timezone\n      locationType\n      routes {\n        id\n        shortName\n        longName\n        type\n        color\n        textColor\n        routeType\n        agency {\n          id\n          name\n          shortName\n          website\n        }\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get public transport stops within 1km radius of New York City center. Returns comprehensive stop information including routes, operators, accessibility features, and feed licensing information."
					},
					"response": []
				},
				{
					"name": "Get Subway Stops in London - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetSubwayStopsLondon {\n  publicTransportStops(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 51.5074\n      longitude: -0.1278\n    }\n    radius: 2000\n    limit: 15\n    routeType: 1\n  }) {\n    stops {\n      id\n      name\n      description\n      location {\n        latitude\n        longitude\n      }\n      platformCode\n      platformName\n      wheelchairBoarding\n      zoneId\n      routes {\n        id\n        shortName\n        longName\n        type\n        color\n        textColor\n        routeType\n        agency {\n          id\n          name\n          shortName\n          website\n        }\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get subway/metro stops within 2km radius of London center. Uses routeType filter (1 = Subway/Metro) to get only underground transportation."
					},
					"response": []
				},
				{
					"name": "Get Bus Stops with Wheelchair Access - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetAccessibleBusStops {\n  publicTransportStops(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 37.7749\n      longitude: -122.4194\n    }\n    radius: 1500\n    limit: 25\n    routeType: 3\n  }) {\n    stops {\n      id\n      name\n      location {\n        latitude\n        longitude\n      }\n      wheelchairBoarding\n      routes {\n        id\n        shortName\n        longName\n        routeType\n        agency {\n          name\n          shortName\n        }\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get wheelchair-accessible bus stops in San Francisco. Filters for bus routes (routeType: 3) and wheelchair boarding available (1)."
					},
					"response": []
				},
				{
					"name": "Get Transit Routes in Paris - ‚úÖ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Transit routes data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.publicTransportRoutes).to.have.property('routes');",
									"    pm.expect(responseJson.data.publicTransportRoutes.routes).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetTransitRoutesParis {\n  publicTransportRoutes(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 48.8566\n      longitude: 2.3522\n    }\n    radius: 3000\n    limit: 20\n  }) {\n    routes {\n      id\n      shortName\n      longName\n      description\n      type\n      url\n      color\n      textColor\n      sortOrder\n      continuousPickup\n      continuousDropOff\n      routeType\n      agency {\n        id\n        name\n        url\n        timezone\n        language\n        phone\n        fareUrl\n        email\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get public transport routes within 3km radius of Paris center. Returns detailed route information including geometry, operators, service details, and licensing information."
					},
					"response": []
				},
				{
					"name": "Get Metro Routes Only - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetMetroRoutes {\n  publicTransportRoutes(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 40.7580\n      longitude: -73.9855\n    }\n    radius: 5000\n    operatorId: \"o-dr5r-nyct\"\n    routeType: \"1\"\n    limit: 30\n  }) {\n    routes {\n      id\n      shortName\n      longName\n      description\n      type\n      color\n      textColor\n      routeType\n      agency {\n        id\n        name\n        shortName\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get metro/subway routes in New York Times Square area. Filters for subway routes (routeType: 1) from NYC Transit operator."
					},
					"response": []
				},
				{
					"name": "Get GTFS Feeds by Location - ‚úÖ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('GTFS feeds data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.publicTransportFeeds).to.have.property('feeds');",
									"    pm.expect(responseJson.data.publicTransportFeeds.feeds).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetGTFSFeeds {\n  publicTransportFeeds(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 37.7749\n      longitude: -122.4194\n    }\n    radius: 10000\n    limit: 15\n  }) {\n    feeds {\n      onestopId\n      spec\n      urls {\n        staticCurrent\n        realtimeVehiclePositions\n        realtimeTripUpdates\n        realtimeAlerts\n      }\n      languages\n      license {\n        spdxIdentifier\n        url\n        useWithoutAttribution\n        createDerivedProduct\n        redistributionAllowed\n        commercialUseAllowed\n        shareAlikeOptional\n        attributionText\n        attributionInstructions\n      }\n      operators {\n        onestopId\n        name\n        url\n        timezone\n        language\n        phone\n        fareUrl\n        email\n        places {\n          countryName\n          stateName\n          cityName\n        }\n      }\n      feedState {\n        feedVersion {\n          sha1\n          earliestCalendarDate\n          latestCalendarDate\n          fetchedAt\n        }\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get GTFS feeds within 10km radius of San Francisco. Returns comprehensive feed information including licensing, authorization, operators, and various feed URLs for static and real-time data."
					},
					"response": []
				},
				{
					"name": "Get Active Feeds with Real-time Data - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetActiveFeedsWithRealtime {\n  publicTransportFeeds(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 34.0522\n      longitude: -118.2437\n    }\n    radius: 10000\n    spec: \"gtfs\"\n    limit: 10\n  }) {\n    feeds {\n      onestopId\n      spec\n      urls {\n        staticCurrent\n        realtimeVehiclePositions\n        realtimeTripUpdates\n        realtimeAlerts\n      }\n      operators {\n        onestopId\n        name\n        url\n      }\n      license {\n        spdxIdentifier\n        attributionText\n        commercialUseAllowed\n      }\n      feedState {\n        feedVersion {\n          sha1\n          earliestCalendarDate\n          latestCalendarDate\n          fetchedAt\n        }\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get active GTFS feeds with real-time data capabilities in Los Angeles area. Filters for feeds that provide live vehicle positions and trip updates."
					},
					"response": []
				},
				{
					"name": "Get Transit Operators in SF Bay Area - ‚úÖ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Transit operators data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.publicTransportOperators).to.have.property('operators');",
									"    pm.expect(responseJson.data.publicTransportOperators.operators).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetTransitOperatorsSF {\n  publicTransportOperators(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 37.7749\n      longitude: -122.4194\n    }\n    radius: 10000\n    limit: 20\n  }) {\n    operators {\n      onestopId\n      name\n      url\n      timezone\n      language\n      phone\n      fareUrl\n      email\n      places {\n        countryName\n        stateName\n        cityName\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get public transport operators within 25km radius of San Francisco Bay Area. Returns comprehensive operator information including associated feeds, geographic details, and licensing information."
					},
					"response": []
				},
				{
					"name": "Get European Transit Operators - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetEuropeanOperators {\n  publicTransportOperators(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 52.5200\n      longitude: 13.4050\n    }\n    radius: 10000\n    limit: 15\n  }) {\n    operators {\n      onestopId\n      name\n      url\n      timezone\n      language\n      phone\n      fareUrl\n      email\n      places {\n        countryName\n        stateName\n        cityName\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get transit operators in Berlin, Germany area with country filter. Shows European transit operators and their associated GTFS feeds."
					},
					"response": []
				},
				{
					"name": "Get Minimal Stop Information - ‚úÖ",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetMinimalStopInfo {\n  publicTransportStops(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 43.6532\n      longitude: -79.3832\n    }\n    radius: 2000\n    limit: 30\n  }) {\n    stops {\n      id\n      name\n      location {\n        latitude\n        longitude\n      }\n      wheelchairBoarding\n      routes {\n        shortName\n        longName\n        routeType\n      }\n    }\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get minimal transit stop information (basic fields only) for quick location and accessibility checks in Toronto area."
					},
					"response": []
				},
				{
					"name": "Transit Stops Validation Error - ‚ùå",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 (GraphQL errors in response)', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('GraphQL validation errors are returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('errors');",
									"    pm.expect(responseJson.errors).to.be.an('array');",
									"    pm.expect(responseJson.errors[0]).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query TransitStopsValidationError {\n  publicTransportStops(request: {\n    username: \"{{testUsername}}\"\n    location: {\n      latitude: 91.0\n      longitude: 181.0\n    }\n    radius: 50000\n    limit: 200\n  }) {\n    stops {\n      id\n      name\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Example of validation errors: Invalid coordinates (lat > 90, lng > 180), radius too large (>10km), and limit too high (>100). Shows validation error messages."
					},
					"response": []
				},
				{
					"name": "Transit Routes Missing Location Error - ‚ùå",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 (GraphQL errors in response)', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Location validation error is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('errors');",
									"    pm.expect(responseJson.errors[0].message).to.include('Location is required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query TransitRoutesMissingLocation {\n  publicTransportRoutes(request: {\n    username: \"{{testUsername}}\"\n    limit: 10\n  }) {\n    routes {\n      id\n      shortName\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Example of location validation error: Missing latitude and longitude coordinates. Shows error: 'Location is required (latitude and longitude must be provided)'"
					},
					"response": []
				}
			],
			"description": "Public Transport API for accessing comprehensive transit information using Transitland data. Supports real-time transit stops, routes, GTFS feeds, and operators with advanced location-based filtering and multi-modal transport coverage.\n\n**IMPORTANT VALIDATION RULES:**\n- Latitude must be between -90 and 90\n- Longitude must be between -180 and 180\n- Radius must be between 100 and 10000 meters\n- Limit must be between 1 and 100\n- Username is always required\n- Location (latitude and longitude) is required for all queries\n\n**Query Types:**\n- **Stops**: Transit stops and stations with platform information, accessibility features, and route connections\n- **Routes**: Transit routes with geometry, service details, and operator information\n- **Feeds**: GTFS feeds with licensing, authorization, and real-time capabilities\n- **Operators**: Transit agencies and operators with contact information and associated feeds\n\n**Advanced Filters:**\n- **routeType**: Filter by transport mode (0=Tram, 1=Subway, 2=Rail, 3=Bus, 4=Ferry, etc.)\n- **wheelchairBoarding**: Filter by accessibility (0=Unknown, 1=Accessible, 2=Not accessible)\n- **operatorId**: Filter by specific transit operator (e.g., 'o-dr5r-nyct' for NYC Transit)\n- **feedId**: Filter by specific GTFS feed (e.g., 'f-dr5r-nyct~rt' for NYC MTA real-time)\n- **country**: Filter by country code (e.g., 'US', 'CA', 'GB', 'DE')\n- **active**: Filter for active feeds only (true/false)\n- **realtime**: Filter for feeds with real-time capabilities (true/false)\n\n**Route Types (GTFS Standard):**\n- 0: Tram, Streetcar, Light rail\n- 1: Subway, Metro\n- 2: Rail (intercity or long-distance)\n- 3: Bus\n- 4: Ferry\n- 5: Cable tram\n- 6: Aerial lift (gondola, suspended cable car)\n- 7: Funicular\n- 11: Trolleybus\n- 12: Monorail\n\n**Wheelchair Boarding Codes:**\n- 0: Unknown accessibility\n- 1: Wheelchair accessible\n- 2: Not wheelchair accessible\n\n**Common Errors:**\n- Invalid coordinates (out of valid range)\n- Radius too large (>10km) or too small (<100m)\n- Limit exceeding maximum (>100)\n- Missing required location parameters\n- Invalid route type, operator, or feed IDs\n- Missing required parameters (username, latitude, longitude)\n\n**Features:**\n- Real-time transit data from Transitland API v2\n- GTFS (General Transit Feed Specification) integration\n- Comprehensive route geometry with GeoJSON coordinates\n- Multi-modal transport coverage (bus, rail, subway, ferry, etc.)\n- Operator and agency information with contact details\n- Accessibility features and wheelchair boarding information\n- Platform codes, zone information, and parent station relationships\n- Real-time feeds with vehicle positions, trip updates, and service alerts\n- Licensing information for commercial and non-commercial use\n- Global coverage with local transit authorities\n- Tag-based metadata for additional stop and operator information\n- Authorization details for accessing protected feeds\n- Historical and current feed versions with import timestamps\n- Cached results for performance optimization (15 minutes TTL)\n\n**Real-time Data Types:**\n- **Vehicle Positions**: Live location of transit vehicles\n- **Trip Updates**: Real-time arrival/departure predictions\n- **Service Alerts**: Disruptions, delays, and service changes\n\n**Sample Major Operators:**\n- NYC MTA (o-dr5r-nyct): New York City subway, bus\n- SF Muni (o-9q8y-sfmta): San Francisco transit\n- BART (o-9q9-bart): Bay Area Rapid Transit\n- TfL (o-gcpv-tfl): Transport for London\n- RATP (o-u09-ratp): Paris Metro, RER, bus\n- BVG (o-u33d-bvg): Berlin public transport\n- TTC (o-dpz8-ttc): Toronto Transit Commission"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set dynamic variables for testing",
					"if (!pm.collectionVariables.get('username')) {",
					"    pm.collectionVariables.set('username', 'demoUser');",
					"}",
					"",
					"// Add timestamp for cache-busting if needed",
					"pm.collectionVariables.set('timestamp', new Date().getTime());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Common test for all GraphQL requests",
					"pm.test('Status code is 200', function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test('Response is valid JSON', function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"pm.test('No GraphQL errors', function () {",
					"    const responseJson = pm.response.json();",
					"    pm.expect(responseJson).to.not.have.property('errors');",
					"});",
					"",
					"pm.test('Response has data', function () {",
					"    const responseJson = pm.response.json();",
					"    pm.expect(responseJson).to.have.property('data');",
					"    pm.expect(responseJson.data).to.not.be.null;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5330",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": "demoUser",
			"type": "string"
		},
		{
			"key": "timestamp",
			"value": ""
		}
	]
}